{"mappings":"iiBAmEA,IAAAA,EAAAC,EAAA,SAKMC,EAASC,SAASC,cAAc,SAItC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAdPL,EAAOa,iBAAiB,UAmBxB,SAAkBC,GAChBA,EAAMC,iBAQN,IAPA,IAAMC,EAAW,IAAIC,SAASjB,GAE1BkB,EAASF,EAASG,IAAI,SACpBC,EAAQJ,EAASG,IAAI,QACrBE,EAASL,EAASG,IAAI,UAGnBG,EAAQ,EAAGA,EAAQD,EAAQC,IAClCJ,EAASK,OAAOL,GAAUK,OAAOH,GACjCI,QAAQC,IAAIP,GACZf,EAAcmB,EAAOJ,GACpBQ,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACnBuB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAEvE2B,OAAM,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03 - promises.html і\n// 03 - promises.js.Подивися демо - відео роботи \n// генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач \n// буде вводити першу затримку в мілісекундах, крок \n// збільшення затримки для кожного промісу після першого \n// і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//   Напиши скрипт, який на момент сабміту форми викликає \n// функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику \n//   передай їй номер промісу(position), що створюється,\n//   і затримку, враховуючи першу затримку(delay), введену\n// користувачем, і крок(step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// + Доповни код функції createPromise таким чином, щоб \n// вона повертала один проміс, який виконується або \n// відхиляється через delay часу.Значенням промісу \n// повинен бути об'єкт, в якому будуть властивості \n// position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того,\n// що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} \n//     in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} \n//     in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання \n// завдання, але буде хорошою додатковою практикою.\n\n// + Для відображення повідомлень користувачеві, замість\n// console.log(), використовуй бібліотеку notiflix.\nimport Notiflix from \"notiflix\";\n\n// const firstDelay = document.querySelector('[name=\"delay\"]');\n// const delayStep = document.querySelector('[name=\"step\"]');\n// const amount = document.querySelector('[name=\"amount\"]');\nconst myForm = document.querySelector('.form');\n\nmyForm.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  // console.log(`${position}, ${delay}`);\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => { \n      if (shouldResolve) {\n      // Fulfill\n        resolve({position, delay});\n    } else {\n      // Reject\n        reject({position, delay});\n    }\n    }, delay)\n  });\n}\n\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const formData = new FormData(myForm)\n\n  let fDelay = formData.get('delay');\n  const fStep = formData.get('step');\n  const fAmont = formData.get('amount');\n\n  // console.log(fDelay, fStep, fAmont);\n  for (let index = 1; index < fAmont; index++) {\n    fDelay = Number(fDelay) + Number(fStep);\n    console.log(fDelay);\n    createPromise(index, fDelay)\n    .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    \n  }\n  \n  // event.currentTarget.reset();\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$myForm","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","formData","FormData","fDelay","get","fStep","fAmont","index","Number","console","log","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b173d1d1.js.map"}