{"mappings":"iiBAmEA,IAAAA,EAAAC,EAAA,SASA,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAhBQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAmBxB,SAAkBC,GAEhBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAG3BC,QAAQC,IAAIJ,EAAMK,MAAOJ,EAAKI,MAAOH,EAAOG,OAC5C,IAAK,IAAIC,EAAQ,EAAGA,EAAQJ,EAAOG,MAAOC,IAExCxB,EAAcwB,EAAON,EAAMK,OAC1BE,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACnByB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03 - promises.html і\n// 03 - promises.js.Подивися демо - відео роботи \n// генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач \n// буде вводити першу затримку в мілісекундах, крок \n// збільшення затримки для кожного промісу після першого \n// і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//   Напиши скрипт, який на момент сабміту форми викликає \n// функцію createPromise(position, delay) стільки разів,\n//   скільки ввели в поле amount.Під час кожного виклику \n//   передай їй номер промісу(position), що створюється,\n//   і затримку, враховуючи першу затримку(delay), введену\n// користувачем, і крок(step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// + Доповни код функції createPromise таким чином, щоб \n// вона повертала один проміс, який виконується або \n// відхиляється через delay часу.Значенням промісу \n// повинен бути об'єкт, в якому будуть властивості \n// position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того,\n// що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} \n//     in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} \n//     in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання \n// завдання, але буде хорошою додатковою практикою.\n\n// + Для відображення повідомлень користувачеві, замість\n// console.log(), використовуй бібліотеку notiflix.\nimport Notiflix from \"notiflix\";\n\n// const firstDelay = document.querySelector('[name=\"delay\"]');\n// const delayStep = document.querySelector('[name=\"step\"]');\n// const amount = document.querySelector('[name=\"amount\"]');\nconst myForm = document.querySelector('.form');\n\nmyForm.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  // console.log(`${position}, ${delay}`);\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => { \n      if (shouldResolve) {\n      // Fulfill\n        resolve({position, delay});\n    } else {\n      // Reject\n        reject({position, delay});\n    }\n    }, delay)\n  });\n}\n\n\nfunction onSubmit(event) {\n  \n  event.preventDefault();\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n\n  console.log(delay.value, step.value, amount.value);\n  for (let index = 0; index < amount.value; index++) {\n    \n    createPromise(index, delay.value)\n    .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    \n  }\n  \n  // event.currentTarget.reset();\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","console","log","value","index","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b40fad45.js.map"}